// Generated by CoffeeScript 1.11.1
(function() {
  var DDP_VERSIONS,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  DDP_VERSIONS = ['1', 'pre2', 'pre1'];

  this.RxDDP = (function() {
    function RxDDP(wsUri) {
      this.getCollection = bind(this.getCollection, this);
      this.setCollection = bind(this.setCollection, this);
      this.readySubscription = bind(this.readySubscription, this);
      this.subscribeStream = bind(this.subscribeStream, this);
      this.callStream = bind(this.callStream, this);
      this.methodResult = bind(this.methodResult, this);
      this.pong = bind(this.pong, this);
      this.wsUri = wsUri;
      this.subs = {};
      this.results = {};
      this.collections = {};
      this.sock;
      this.closeObservable = new Rx.Subject;
    }

    RxDDP.prototype._id = function() {
      var cnt;
      cnt = 0;
      return {
        next: function() {
          return "" + (++cnt);
        }
      };
    };

    RxDDP.prototype.connect = function() {
      return Rx.Observable.create((function(_this) {
        return function(conn) {
          _this.sock = new WebSocket(_this.wsUri);
          _this.sock.onopen = function() {
            return _this.send({
              msg: 'connect',
              version: DDP_VERSIONS[0],
              support: DDP_VERSIONS
            });
          };
          _this.sock.onerror = conn.error;
          _this.sock.onmessage = function(msg) {
            var data, eventHandler;
            data = JSON.parse(msg.data);
            eventHandler = {
              'connected': function(msg) {
                return conn.next(msg);
              },
              'ping': _this.pong,
              'added': _this.setCollection,
              'removed': _this.setCollection,
              'changed': _this.setCollection,
              'result': _this.methodResult,
              'ready': _this.readySubscription,
              'nosub': _this.nosubscribe
            };
            eventHandler = eventHandler[data.msg];
            return eventHandler && eventHandler(data);
          };
          return _this.sock.onclose = function(status) {
            return _this.closeObservable.next(status);
          };
        };
      })(this));
    };

    RxDDP.prototype.send = function(msg) {
      return this.sock.send(JSON.stringify(msg));
    };

    RxDDP.prototype.pong = function() {
      return this.send({
        msg: 'pong'
      });
    };

    RxDDP.prototype.close = function() {
      return this.sock.close();
    };

    RxDDP.prototype.getStream = function(id) {
      this.results[id] = this.results[id] || new Rx.Subject();
      return this.results[id];
    };

    RxDDP.prototype.methodResult = function(msg) {
      return this.getStream(msg.id).next(msg.result);
    };

    RxDDP.prototype.callStream = function(methodName, params) {
      var id;
      if (params == null) {
        params = [];
      }
      id = this._id().next();
      this.send({
        id: id,
        msg: 'method',
        method: methodName,
        params: params
      });
      return this.getStream(this.results[id]);
    };

    RxDDP.prototype.subscribeStream = function(publicationName, params) {
      var id;
      if (params == null) {
        params = [];
      }
      id = Random.id();
      this.send({
        id: id,
        msg: 'sub',
        name: publicationName,
        params: params
      });
      return this.getStream(id);
    };

    RxDDP.prototype.nosubscribe = function(msg) {};

    RxDDP.prototype.unsubscribe = function(id) {
      return this.send({
        id: id,
        msg: 'unsub'
      });
    };

    RxDDP.prototype.readySubscription = function(msg) {
      var i, len, ref, results, sub;
      ref = msg.subs;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        sub = ref[i];
        results.push(this.getStream(this.subs[sub]).next(sub));
      }
      return results;
    };

    RxDDP.prototype.setCollection = function(msg) {
      return this.getStream(msg.collection).next(msg);
    };

    RxDDP.prototype.getCollection = function(collection) {
      return this.getStream(collection);
    };

    return RxDDP;

  })();

}).call(this);

//# sourceMappingURL=rxddp.js.map
